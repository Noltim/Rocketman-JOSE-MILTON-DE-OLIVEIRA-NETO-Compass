{
	"info": {
		"_postman_id": "7eb59d4e-48ea-45ab-91eb-a901bb4b4be7",
		"name": "ServeRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20611170"
	},
	"item": [
		{
			"name": "/usuarios",
			"item": [
				{
					"name": "Testes positivo",
					"item": [
						{
							"name": "Listar usuários",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['quantidade', 'usuarios']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"  \r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", () =>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário - Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário - Comum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"var body = {\r",
											"  \"nome\": name,\r",
											"  \"email\": email,\r",
											"  \"password\": senha,\r",
											"  \"administrador\": \"false\"\r",
											"}\r",
											"pm.environment.set('req_BodyNormal', JSON.stringify(body)),\r",
											"pm.environment.set('emailUsuarioNormal', email),\r",
											"pm.environment.set('senhaUsuarioNormal', senha);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{req_BodyNormal}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['nome', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"var schema = {\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"nome\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"password\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"administrador\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"nome\",\r",
											"    \"email\",\r",
											"    \"password\",\r",
											"    \"administrador\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", () =>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"const encontrarUsuarios = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"   \r",
											"}\r",
											"\r",
											"pm.sendRequest(encontrarUsuarios, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_id', res.usuarios[0]._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao encontrar\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{_id}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário (com efeito)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_id', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"FAIL\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{_id}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário (sem efeito)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{_idNaoExistente}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{_idNaoExistente}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário (alterar)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"const encontrarUsuarios = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"   \r",
											"}\r",
											"\r",
											"pm.sendRequest(encontrarUsuarios, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_id', res.usuarios[0]._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao encontrar\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Alterado da silva\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{_id}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário (cadastro)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{$randomInt}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{$randomInt}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Testes negativo",
					"item": [
						{
							"name": "Cadastrar usuário - Usuário já existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"   \r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', res.usuarios[0].email)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"FAIL\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano do Silva\",\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário - sem email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano do Silva\",\r\n  \"email\": \"\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário - email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano do Silva\",\r\n  \"email\": \"asdasdasd\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário - sem body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome é obrigatório\",\"email é obrigatório\", \"password é obrigatório\", \"administrador é obrigatório\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por ID - Com ID errado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{_idNaoExistente}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{_idNaoExistente}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário - email já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_id', res.usuarios[0]._id)\r",
											"        pm.environment.set('emailValido', res.usuarios[1].email)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{_id}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário - com carrinho cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"//------------------------------\r",
											"\r",
											"\r",
											"const encontrarUsuarioComCarrinho = {\r",
											"\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    \r",
											"}\r",
											"\r",
											"pm.sendRequest(encontrarUsuarioComCarrinho, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_id', res.carrinhos[0].idUsuario)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{_id}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/login",
			"item": [
				{
					"name": "Testes positivo",
					"item": [
						{
							"name": "Realizar login - Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"  \r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login - Comum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set(\"tokenUsuarioNormal\", jsonData.authorization.slice(7))\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailUsuarioNormal}}\",\r\n  \"password\": \"{{senhaUsuarioNormal}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Testes negativo",
					"item": [
						{
							"name": "Realizar login sem email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"pm.globals.set(\"variable_key\", \"variable_value\");\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta contém 'email'\", ()=>{\r",
											"    pm.expect(pm.response.json().email).to.exist\r",
											"})\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"  \r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"FAIL\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailVazio}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login com email errado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400(Ambiente Prod) ou 401(Ambiente local)\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401, 400]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											" \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"  \r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"FAIL\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailErrado}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login sem senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400(ambiente local) ou 401(ambiente prod)\", function () {\r",
											"     pm.expect(pm.response.code).to.be.oneOf([401, 400]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"})\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"  \r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"FAIL\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaVazia}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login com senha errada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.unauthorized;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"  \r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"FAIL\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaErrada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login com campos vazios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.serverError;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Adicione aspas em todos os valores. Esse problema já está sendo investigado na issue https://github.com/ServeRest/ServeRest/issues/225\");\r",
											"});\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"  \r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"FAIL\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": ,\r\n  \"password\": \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login sem os campos obrigatorios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email é obrigatório\", \"password é obrigatório\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"  \r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"FAIL\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/produtos",
			"item": [
				{
					"name": "Testes positivo",
					"item": [
						{
							"name": "Listar produtos cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var schema = {\r",
											"   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"produtos\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"preco\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"descricao\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"quantidade\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"preco\",\r",
											"            \"descricao\",\r",
											"            \"quantidade\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"produtos\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", () =>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/produtos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"\r",
											"\r",
											"const postRequestCadastroUsuario = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastroUsuario, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"     \r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar usuario\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"const atributos = [\"message\", '_id']\r",
											"\r",
											"pm.test(`Resposta contém o '${atributos}'`)\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res.produtos[0]._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao encontrar produto\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"nome\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"preco\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"descricao\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"nome\",\r",
											"    \"preco\",\r",
											"    \"descricao\",\r",
											"    \"quantidade\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", () =>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProduto}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProduto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - Excluido Sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"//-----------------------------\r",
											"let email = pm.environment.get(\"emailValido\")\r",
											"let senha = pm.environment.get(\"senhaValida\")\r",
											"//-----------------------------\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let id_produto = pm.environment.get(\"_idProduto\")\r",
											"\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": preco,\r",
											"            \"descricao\": descricao,\r",
											"            \"quantidade\": quantidade\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProduto}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProduto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - Nenhum Excluido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProdutoNaoExiste\n}}\n",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProdutoNaoExiste\n}}\n"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let email = pm.variables.get(\"emailValido\")\r",
											"let senha = pm.variables.get(\"senhaValida\")\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"        \r",
											"    }catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao logar\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const pegarIdProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											" \r",
											"}\r",
											"\r",
											"pm.sendRequest(pegarIdProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res.produtos[0]._id)\r",
											"        \r",
											"    }catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha na requisição do ID\")\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Resposta contém 'message'\", ()=>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProduto}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProduto}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teste negativo",
					"item": [
						{
							"name": "Cadastrar produto - Já cadastrado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"        pm.environment.set('_id', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"const postRequestListarProdutos = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestListarProdutos, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('produtosCadatrado', res.produtos[0].nome)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{produtoCadastrado}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto - Sem autorização para cadastrar",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"        pm.environment.set('_id', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.unauthorized;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto - Usuario cadastrando produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailUsuarioNormal\")\r",
											"let senha1 = pm.environment.get(\"senhaUsuarioNormal\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"false\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailUsuarioNormal', email)\r",
											"        pm.environment.set('senhaUsuarioNormal', senha)\r",
											"        pm.environment.set('_idUsuarioNormal', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('tokenUsuarioNormal', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.forbidden;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenUsuarioNormal}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto - Não encontrado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProdutoNaoExiste\n}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProdutoNaoExiste\n}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - No carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let email = pm.variables.get(\"emailValido\")\r",
											"let senha = pm.variables.get(\"senhaValida\")\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"        \r",
											"    }catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao logar\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const pegarIdCarrinhoProduto = {\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											" \r",
											"}\r",
											"\r",
											"pm.sendRequest(pegarIdCarrinhoProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProdutoNoCarrinho', res.carrinhos[0].produtos[0].idProduto)\r",
											"        \r",
											"    }catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha na requisição do ID\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProdutoNoCarrinho}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProdutoNoCarrinho}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - Sem Token autorizando",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"//-----------------------------\r",
											"let email = pm.environment.get(\"emailValido\")\r",
											"let senha = pm.environment.get(\"senhaValida\")\r",
											"//-----------------------------\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let id_produto = pm.environment.get(\"_idProduto\")\r",
											"\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": preco,\r",
											"            \"descricao\": descricao,\r",
											"            \"quantidade\": quantidade\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.unauthorized;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProduto}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProduto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto - Exclusivo para administradores",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailUsuarioNormal\")\r",
											"let senha1 = pm.environment.get(\"senhaUsuarioNormal\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"false\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailUsuarioNormal', email)\r",
											"        pm.environment.set('senhaUsuarioNormal', senha)\r",
											"        pm.environment.set('_idUsuarioNormal', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('tokenUsuarioNormal', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.forbidden;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenUsuarioNormal}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProduto}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProduto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar produto - Produto com mesmo nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{produtosCadatrado}}\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProduto}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProduto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar produto - Sem token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.unauthorized;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProduto}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProduto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar produto - Rota de Administradores",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailUsuarioNormal\")\r",
											"let senha1 = pm.environment.get(\"senhaUsuarioNormal\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"false\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailUsuarioNormal', email)\r",
											"        pm.environment.set('senhaUsuarioNormal', senha)\r",
											"        pm.environment.set('_idUsuarioNormal', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('tokenUsuarioNormal', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.forbidden;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenUsuarioNormal}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos/{{_idProduto}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										"{{_idProduto}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/carrinhos",
			"item": [
				{
					"name": "Testes positivo",
					"item": [
						{
							"name": "Listar carrinhos cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var schema = {\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"carrinhos\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"produtos\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"idProduto\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"quantidade\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"precoUnitario\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"idProduto\",\r",
											"                    \"quantidade\",\r",
											"                    \"precoUnitario\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"idProduto\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"quantidade\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"precoUnitario\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"idProduto\",\r",
											"                    \"quantidade\",\r",
											"                    \"precoUnitario\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"precoTotal\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"quantidadeTotal\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"idUsuario\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"produtos\",\r",
											"            \"precoTotal\",\r",
											"            \"quantidadeTotal\",\r",
											"            \"idUsuario\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"carrinhos\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", () =>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"produtos\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"idProduto\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"quantidade\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"precoUnitario\": {\r",
											"              \"type\": \"integer\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"idProduto\",\r",
											"            \"quantidade\",\r",
											"            \"precoUnitario\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"precoTotal\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"quantidadeTotal\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"idUsuario\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"produtos\",\r",
											"    \"precoTotal\",\r",
											"    \"quantidadeTotal\",\r",
											"    \"idUsuario\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											" \r",
											" pm.test(\"Validating schema\", () =>{\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"\r",
											"const LiscaCarrinho = {\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    \r",
											"}\r",
											"\r",
											"pm.sendRequest(LiscaCarrinho, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idCarrinho', res.carrinhos[0]._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao procurar carrinhos\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/{{_idCarrinho}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"{{_idCarrinho}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho (concluir-compra)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributo = ['menssage']\r",
											"\r",
											"pm.test(`Resposta contém o atributo '${atributo}'`)\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"//-----------------------------\r",
											"let email = pm.environment.get(\"emailValido\")\r",
											"let senha = pm.environment.get(\"senhaValida\")\r",
											"//-----------------------------\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let id_produto = pm.environment.get(\"_idProduto\")\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": preco,\r",
											"            \"descricao\": descricao,\r",
											"            \"quantidade\": quantidade\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"const CadastrarCarrinho = {\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"produtos\": [\r",
											"                {\r",
											"                    \"idProduto\": id_produto,\r",
											"                    \"quantidade\": 1\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(CadastrarCarrinho, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idCarrinho', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho (concluir-compra) - Carrinho não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"        pm.environment.set('_id', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho e retornar produtos para estoque",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const atributo = ['menssage']\r",
											"\r",
											"pm.test(`Resposta contém o atributo '${atributo}'`)\r",
											" \r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"//-----------------------------\r",
											"let email = pm.environment.get(\"emailValido\")\r",
											"let senha = pm.environment.get(\"senhaValida\")\r",
											"//-----------------------------\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let id_produto = pm.environment.get(\"_idProduto\")\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": preco,\r",
											"            \"descricao\": descricao,\r",
											"            \"quantidade\": quantidade\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"const CadastrarCarrinho = {\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"produtos\": [\r",
											"                {\r",
											"                    \"idProduto\": id_produto,\r",
											"                    \"quantidade\": 1\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(CadastrarCarrinho, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idCarrinho', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho e retornar produtos para estoque - Não foi encontrado carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não foi encontrado carrinho para esse usuário\");\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"//-----------------------------\r",
											"let email = pm.environment.get(\"emailValido\")\r",
											"let senha = pm.environment.get(\"senhaValida\")\r",
											"//-----------------------------\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let id_produto = pm.environment.get(\"_idProduto\")\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": preco,\r",
											"            \"descricao\": descricao,\r",
											"            \"quantidade\": quantidade\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"const CadastrarCarrinho = {\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"produtos\": [\r",
											"                {\r",
											"                    \"idProduto\": id_produto,\r",
											"                    \"quantidade\": 1\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teste negativo",
					"item": [
						{
							"name": "Cadastrar carrinho - Erro Produto não encontrado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"        pm.environment.set('_id', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \" \",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - Erro Produto zerado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"        pm.environment.set('_id', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, \r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": 2,\r",
											"            \"descricao\": \"Produto teste\",\r",
											"            \"quantidade\": 0\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProdutoZerado', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Produto não possui quantidade suficiente\");\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProdutoZerado}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - sem token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"        pm.environment.set('_id', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.unauthorized;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho - Produtos duplicados",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"let email1 = pm.environment.get(\"emailValido\")\r",
											"let senha1 = pm.environment.get(\"senhaValida\")\r",
											"\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"pm.sendRequest(postRequest, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('emailValido', email)\r",
											"        pm.environment.set('senhaValida', senha)\r",
											"        pm.environment.set('_id', res._id)\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no cadastro\")\r",
											"    }\r",
											"})\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email1,\r",
											"            \"password\": senha1\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é permitido possuir produto duplicado\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduto}}\",\r\n      \"quantidade\": 1\r\n    },\r\n     {\r\n      \"idProduto\": \"{{_idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por ID - Não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Carrinho não encontrado\");\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/{{_idCarrinhoNaoExistente}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"{{_idCarrinhoNaoExistente}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho (concluir-compra) - Sem token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.unauthorized;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"//-----------------------------\r",
											"let email = pm.environment.get(\"emailValido\")\r",
											"let senha = pm.environment.get(\"senhaValida\")\r",
											"//-----------------------------\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let id_produto = pm.environment.get(\"_idProduto\")\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": preco,\r",
											"            \"descricao\": descricao,\r",
											"            \"quantidade\": quantidade\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"const CadastrarCarrinho = {\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"produtos\": [\r",
											"                {\r",
											"                    \"idProduto\": id_produto,\r",
											"                    \"quantidade\": 1\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(CadastrarCarrinho, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idCarrinho', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho e retornar produtos para estoque - Sem Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.unauthorized;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"//-----------------------------\r",
											"let email = pm.environment.get(\"emailValido\")\r",
											"let senha = pm.environment.get(\"senhaValida\")\r",
											"//-----------------------------\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let id_produto = pm.environment.get(\"_idProduto\")\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": preco,\r",
											"            \"descricao\": descricao,\r",
											"            \"quantidade\": quantidade\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"const CadastrarCarrinho = {\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"produtos\": [\r",
											"                {\r",
											"                    \"idProduto\": id_produto,\r",
											"                    \"quantidade\": 1\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(CadastrarCarrinho, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idCarrinho', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Fluxos",
			"item": [
				{
					"name": "Fluxo de compra",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"var body = \r",
											"  {\r",
											"  \"nome\": pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"  \"email\": pm.variables.replaceIn('{{$randomEmail}}'),\r",
											"  \"password\": pm.variables.replaceIn('{{$randomPassword}}'),\r",
											"  \"administrador\": \"true\"\r",
											"\r",
											" }; \r",
											"pm.collectionVariables.set('req_body', JSON.stringify(body));\r",
											"pm.environment.set(\"senhaValida\", body.password),\r",
											"pm.environment.set(\"emailValido\", body.email)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{{req_body}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set('token', jsonData.authorization.slice(7))\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201,200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set(\"_idProduto\", jsonData._id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho (concluir-compra)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const atributo = ['menssage']\r",
											"\r",
											"pm.test(`Resposta contém o atributo '${atributo}'`)\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho e retornar produtos para estoque",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const atributo = ['menssage']\r",
											"\r",
											"pm.test(`Resposta contém o atributo '${atributo}'`)\r",
											" \r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('acessoUrl')\r",
											"\r",
											"//-----------------------------\r",
											"let email = pm.environment.get(\"emailValido\")\r",
											"let senha = pm.environment.get(\"senhaValida\")\r",
											"//-----------------------------\r",
											"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"let btoken = pm.environment.get(\"token\")\r",
											"let id_produto = pm.environment.get(\"_idProduto\")\r",
											"\r",
											"\r",
											"const postRequestLogin = {\r",
											"    url: `${url}/login`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": email,\r",
											"            \"password\": senha\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('token', res.authorization.slice(7))\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha no login\")\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"const postRequestCadastrarProduto = {\r",
											"    url: `${url}/produtos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": produto,\r",
											"            \"preco\": preco,\r",
											"            \"descricao\": descricao,\r",
											"            \"quantidade\": quantidade\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequestCadastrarProduto, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"const CadastrarCarrinho = {\r",
											"    url: `${url}/carrinhos`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${btoken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"produtos\": [\r",
											"                {\r",
											"                    \"idProduto\": id_produto,\r",
											"                    \"quantidade\": 1\r",
											"                }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(CadastrarCarrinho, function (err, response) {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //operação\r",
											"        pm.environment.set('_idCarrinho', res._id)\r",
											"\r",
											"    } catch{\r",
											"        //outraOp\r",
											"        console.warn(\"Falha ao cadastrar produto\")\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Excluir usuário com carrinho",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"var body = \r",
											"  {\r",
											"  \"nome\": pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"  \"email\": pm.variables.replaceIn('{{$randomEmail}}'),\r",
											"  \"password\": pm.variables.replaceIn('{{$randomPassword}}'),\r",
											"  \"administrador\": \"true\"\r",
											"\r",
											" }; \r",
											"pm.collectionVariables.set('req_body', JSON.stringify(body));\r",
											"pm.environment.set(\"senhaValida\", body.password),\r",
											"pm.environment.set(\"emailValido\", body.email)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{{req_body}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set('token', jsonData.authorization.slice(7))\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{senhaValida}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201,200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set(\"_idProduto\", jsonData._id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.badRequest;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Resposta contém \"messagem\"`, () =>{\r",
											"    pm.expect(pm.response.json().message).to.exist\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/usuarios/{{_id}}",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "req_body",
			"value": ""
		}
	]
}